"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const admin_controller_1 = require("../controllers/implementations/admin.controller");
const admin_sevices_1 = require("../services/implementation/admin.sevices");
const admin_repository_1 = require("../repository/implementations/admin.repository");
const instructorAuth_repository_1 = require("../repository/implementations/instructorAuth.repository");
const auth_repository_1 = require("../repository/implementations/auth.repository");
const authAdmin_1 = __importDefault(require("../middlewares/authAdmin"));
const category_repository_1 = require("../repository/implementations/category.repository");
const course_repository_1 = require("../repository/implementations/course.repository");
const adminRepository = new admin_repository_1.AdminRepository();
const instructorRepository = new instructorAuth_repository_1.InstructorAuth();
const categoryRepository = new category_repository_1.CategoryRepository();
const userRepository = new auth_repository_1.AuthRepository();
const courseRepository = new course_repository_1.CourseRepository();
const adminService = new admin_sevices_1.AdminService(adminRepository, instructorRepository, userRepository, categoryRepository, courseRepository);
const adminController = new admin_controller_1.AdminController(adminService);
const router = (0, express_1.Router)();
router.post("/login", adminController.login.bind(adminController));
router.get("/users", authAdmin_1.default, adminController.getAllUsers.bind(adminController));
router.get("/tutors", authAdmin_1.default, adminController.getAllTutors.bind(adminController));
router.put("/users/block/:email", authAdmin_1.default, adminController.blockUnblockUser.bind(adminController));
router.put("/tutors/block/:email", authAdmin_1.default, adminController.blockUnblockTutor.bind(adminController));
router.get("/dashboard", authAdmin_1.default, adminController.getDashboard.bind(adminController));
router.put("/tutors/verify", authAdmin_1.default, adminController.approveTutor.bind(adminController));
router.get("/category", adminController.getCatgeories.bind(adminController));
router.post("/category", adminController.addCategory.bind(adminController));
router.patch(`/category/delete/:id`, adminController.deleteCategory.bind(adminController));
router.patch(`/category/restore/:id`, adminController.restoreCategory.bind(adminController));
router.get("/courses", authAdmin_1.default, adminController.getCourses.bind(adminController));
router.put("/courses/:id", authAdmin_1.default, adminController.softDeleteCourse.bind(adminController));
router.put("/courses/recover/:id", authAdmin_1.default, adminController.recoverCourse.bind(adminController));
router.delete("/tutors/reject/:email", authAdmin_1.default, adminController.rejectTutor.bind(adminController));
exports.default = router;
