"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const admin_controller_1 = require("../controllers/implementations/admin.controller");
const admin_sevices_1 = require("../services/implementation/admin.sevices");
const admin_repository_1 = require("../repository/implementations/admin.repository");
const instructorAuth_repository_1 = require("../repository/implementations/instructorAuth.repository");
const auth_repository_1 = require("../repository/implementations/auth.repository");
const category_repository_1 = require("../repository/implementations/category.repository");
const course_repository_1 = require("../repository/implementations/course.repository");
const authRole_1 = __importDefault(require("../middlewares/authRole"));
const review_repository_1 = require("../repository/implementations/review.repository");
const wallet_repository_1 = require("../repository/implementations/wallet.repository");
const complaint_repository_1 = require("../repository/implementations/complaint.repository");
const notification_repository_1 = require("../repository/implementations/notification.repository");
const adminRepository = new admin_repository_1.AdminRepository();
const instructorRepository = new instructorAuth_repository_1.InstructorAuth();
const categoryRepository = new category_repository_1.CategoryRepository();
const userRepository = new auth_repository_1.AuthRepository();
const courseRepository = new course_repository_1.CourseRepository();
const reviewRepository = new review_repository_1.ReviewRepository();
const walletRepository = new wallet_repository_1.WalletRepository();
const complaintRepository = new complaint_repository_1.ComplaintRepository();
const notificationRepository = new notification_repository_1.NotificationRepository();
const adminService = new admin_sevices_1.AdminService(adminRepository, instructorRepository, userRepository, categoryRepository, courseRepository, reviewRepository, walletRepository, complaintRepository, notificationRepository);
const adminController = new admin_controller_1.AdminController(adminService);
const router = (0, express_1.Router)();
router.post("/login", adminController.login.bind(adminController));
router.post("/refresh-token", adminController.refreshToken.bind(adminController));
router.get("/users", (0, authRole_1.default)(["admin"]), adminController.getAllUsers.bind(adminController));
router.get("/tutors", (0, authRole_1.default)(["admin"]), adminController.getAllTutors.bind(adminController));
router.put("/users/block/:email", (0, authRole_1.default)(["admin"]), adminController.blockUnblockUser.bind(adminController));
router.put("/tutors/block/:email", (0, authRole_1.default)(["admin"]), adminController.blockUnblockTutor.bind(adminController));
router.get("/dashboard", (0, authRole_1.default)(["admin"]), adminController.getDashboard.bind(adminController));
router.put("/tutors/verify", (0, authRole_1.default)(["admin"]), adminController.approveTutor.bind(adminController));
router.get("/category", (0, authRole_1.default)(["admin", "instructor"]), adminController.getCatgeories.bind(adminController));
router.post("/category", (0, authRole_1.default)(["admin"]), adminController.addCategory.bind(adminController));
router.patch(`/category/delete/:id`, (0, authRole_1.default)(["admin"]), adminController.deleteCategory.bind(adminController));
router.patch(`/category/restore/:id`, (0, authRole_1.default)(["admin"]), adminController.restoreCategory.bind(adminController));
router.get("/courses", (0, authRole_1.default)(["admin"]), adminController.getCourses.bind(adminController));
router.put("/courses/:id", (0, authRole_1.default)(["admin"]), adminController.softDeleteCourse.bind(adminController));
router.put("/courses/recover/:id", (0, authRole_1.default)(["admin"]), adminController.recoverCourse.bind(adminController));
router.get("/reviews", (0, authRole_1.default)(["admin"]), adminController.getAllReviews.bind(adminController));
router.put("/reviews/:id/hide", (0, authRole_1.default)(["admin"]), adminController.hideReview.bind(adminController));
router.put("/reviews/:id/unhide", (0, authRole_1.default)(["admin"]), adminController.unhideReview.bind(adminController));
router.delete("/reviews/:id/", (0, authRole_1.default)(["admin"]), adminController.deleteReview.bind(adminController));
router.delete("/tutors/reject/:email", (0, authRole_1.default)(["admin"]), adminController.rejectTutor.bind(adminController));
router.get("/wallet", (0, authRole_1.default)(["admin"]), adminController.getWallet.bind(adminController));
router.get("/complaints", (0, authRole_1.default)(["admin"]), adminController.getComplaints.bind(adminController));
router.put("/complaints/:id", (0, authRole_1.default)(["admin"]), adminController.responseComplaint.bind(adminController));
router.get("/course-status", adminController.getCourseStats.bind(adminController));
router.get("/income-status", adminController.getIncomeStats.bind(adminController));
router.get("/courses/:courseId", adminController.getSpecificCourseforAdmin.bind(adminController));
router.get("/tutor-view/:id", adminController.getSpecificTutor.bind(adminController));
router.get("/notifications/:userId", adminController.getNotifications.bind(adminController));
router.put("/notifications/read/:notificationId", adminController.markAsRead.bind(adminController));
router.post("/logout", adminController.logOut.bind(adminController));
exports.default = router;
