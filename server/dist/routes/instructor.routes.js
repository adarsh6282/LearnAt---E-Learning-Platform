"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const instructorAuth_repository_1 = require("../repository/implementations/instructorAuth.repository");
const instructorAuth_controller_1 = require("../controllers/implementations/instructorAuth.controller");
const instructorAuth_services_1 = require("../services/implementation/instructorAuth.services");
const otp_repository_1 = require("../repository/implementations/otp.repository");
const auth_repository_1 = require("../repository/implementations/auth.repository");
const admin_repository_1 = require("../repository/implementations/admin.repository");
const multer_1 = __importDefault(require("../utils/multer"));
const authRole_1 = __importDefault(require("../middlewares/authRole"));
const course_repository_1 = require("../repository/implementations/course.repository");
const review_repository_1 = require("../repository/implementations/review.repository");
const order_repository_1 = require("../repository/implementations/order.repository");
const wallet_repository_1 = require("../repository/implementations/wallet.repository");
const category_repository_1 = require("../repository/implementations/category.repository");
const notification_repository_1 = require("../repository/implementations/notification.repository");
const message_repository_1 = require("../repository/implementations/message.repository");
const message_service_1 = require("../services/implementation/message.service");
const instructorAuthRepository = new instructorAuth_repository_1.InstructorAuth();
const userRepository = new auth_repository_1.AuthRepository();
const adminRepository = new admin_repository_1.AdminRepository();
const otpRepository = new otp_repository_1.OtpRepository();
const courseRepository = new course_repository_1.CourseRepository();
const reviewRepository = new review_repository_1.ReviewRepository();
const orderRepository = new order_repository_1.OrderRepository();
const walletRepository = new wallet_repository_1.WalletRepository();
const categoryRepository = new category_repository_1.CategoryRepository();
const messageRepository = new message_repository_1.MessageRepository();
const notificationRepository = new notification_repository_1.NotificationRepository();
const messageService = new message_service_1.MessageService(messageRepository);
const instructorAuthService = new instructorAuth_services_1.InstructorAuthSerivce(instructorAuthRepository, otpRepository, adminRepository, userRepository, courseRepository, reviewRepository, orderRepository, walletRepository, categoryRepository, notificationRepository);
const instructorAuthController = new instructorAuth_controller_1.InstructorAuthController(instructorAuthService, messageService);
const router = (0, express_1.Router)();
router.post("/register", multer_1.default.single("resume"), instructorAuthController.signup.bind(instructorAuthController));
router.post("/refresh-token", instructorAuthController.refreshToken.bind(instructorAuthController));
router.post("/login", instructorAuthController.signin.bind(instructorAuthController));
router.post("/verify-otp", instructorAuthController.verifyOtp.bind(instructorAuthController));
router.post("/forgotpassword", instructorAuthController.forgotPassword.bind(instructorAuthController));
router.post("/reset-verify-otp", instructorAuthController.verifyForgotOtp.bind(instructorAuthController));
router.put("/resetpassword", instructorAuthController.resetPassword.bind(instructorAuthController));
router.post("/resend-otp", instructorAuthController.resentOtp.bind(instructorAuthController));
router.get("/profile", (0, authRole_1.default)(["instructor"]), instructorAuthController.getProfile.bind(instructorAuthController));
router.get("/courses", (0, authRole_1.default)(["instructor"]), instructorAuthController.getCourses.bind(instructorAuthController));
router.put("/reapply", (0, authRole_1.default)(["instructor"]), multer_1.default.single("resume"), instructorAuthController.reApply.bind(instructorAuthController));
router.get("/courses/:courseId", (0, authRole_1.default)(["instructor"]), instructorAuthController.getCoursesById.bind(instructorAuthController));
router.get("/category", (0, authRole_1.default)(["instructor"]), instructorAuthController.getCategory.bind(instructorAuthController));
router.get("/reviews", (0, authRole_1.default)(["instructor"]), instructorAuthController.getInstructorReviews.bind(instructorAuthController));
router.get("/enrollments", (0, authRole_1.default)(["instructor"]), instructorAuthController.getEnrollments.bind(instructorAuthController));
router.put("/profile", (0, authRole_1.default)(["instructor"]), multer_1.default.single("profilePicture"), instructorAuthController.updateProfile.bind(instructorAuthController));
router.get("/wallet", (0, authRole_1.default)(["instructor"]), instructorAuthController.getWallet.bind(instructorAuthController));
router.get("/dashboard", (0, authRole_1.default)(["instructor"]), instructorAuthController.getDashboard.bind(instructorAuthController));
router.get("/course-stats", (0, authRole_1.default)(["instructor"]), instructorAuthController.getCourseStats.bind(instructorAuthController));
router.get("/income-stats", (0, authRole_1.default)(["instructor"]), instructorAuthController.getIncomeStats.bind(instructorAuthController));
router.get("/users/purchased", (0, authRole_1.default)(["instructor"]), instructorAuthController.getPurchasedStudents.bind(instructorAuthController));
router.get("/notifications/:userId", instructorAuthController.getNotifications.bind(instructorAuthController));
router.put("/notifications/read/:notificationId", instructorAuthController.markAsRead.bind(instructorAuthController));
router.get("/chats/unread-counts", (0, authRole_1.default)(["instructor"]), instructorAuthController.getUnreadCounts.bind(instructorAuthController));
router.post("/messages/mark-as-read/:chatId", (0, authRole_1.default)(["instructor"]), instructorAuthController.markRead.bind(instructorAuthController));
router.post("/logout", instructorAuthController.logOut.bind(instructorAuthController));
exports.default = router;
