"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const multer_1 = __importDefault(require("../utils/multer"));
const authRole_1 = __importDefault(require("../middlewares/authRole"));
const instructor_dependencyhandler_1 = require("../dependencyHandlers/instructor.dependencyhandler");
const router = (0, express_1.Router)();
router.post("/register", multer_1.default.single("resume"), instructor_dependencyhandler_1.instructorAuthController.signup.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/refresh-token", instructor_dependencyhandler_1.instructorAuthController.refreshToken.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/login", instructor_dependencyhandler_1.instructorAuthController.signin.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/verify-otp", instructor_dependencyhandler_1.instructorAuthController.verifyOtp.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/forgotpassword", instructor_dependencyhandler_1.instructorAuthController.forgotPassword.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/reset-verify-otp", instructor_dependencyhandler_1.instructorAuthController.verifyForgotOtp.bind(instructor_dependencyhandler_1.instructorAuthController));
router.put("/resetpassword", instructor_dependencyhandler_1.instructorAuthController.resetPassword.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/resend-otp", instructor_dependencyhandler_1.instructorAuthController.resentOtp.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/profile", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getProfile.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/courses", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getCourses.bind(instructor_dependencyhandler_1.instructorAuthController));
router.put("/reapply", (0, authRole_1.default)(["instructor"]), multer_1.default.single("resume"), instructor_dependencyhandler_1.instructorAuthController.reApply.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/courses/:courseId", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getCoursesById.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/category", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getCategory.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/reviews", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getInstructorReviews.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/enrollments", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getEnrollments.bind(instructor_dependencyhandler_1.instructorAuthController));
router.put("/profile", (0, authRole_1.default)(["instructor"]), multer_1.default.single("profilePicture"), instructor_dependencyhandler_1.instructorAuthController.updateProfile.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/wallet", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getWallet.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/dashboard", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getDashboard.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/course-stats", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getCourseStats.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/income-stats", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getIncomeStats.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/users/purchased", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getPurchasedStudents.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/notifications/:userId", instructor_dependencyhandler_1.instructorAuthController.getNotifications.bind(instructor_dependencyhandler_1.instructorAuthController));
router.put("/notifications/read/:notificationId", instructor_dependencyhandler_1.instructorAuthController.markAsRead.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/chats/unread-counts", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getUnreadCounts.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/messages/mark-as-read/:chatId", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.markRead.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/quiz/create-quiz/:courseId", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.createQuiz.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/quiz", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getQuizzes.bind(instructor_dependencyhandler_1.instructorAuthController));
router.patch("/delete/quiz/:quizId", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.deleteQuiz.bind(instructor_dependencyhandler_1.instructorAuthController));
router.put("/quiz/:quizId", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.updateQuiz.bind(instructor_dependencyhandler_1.instructorAuthController));
router.patch("/restore/quiz/:quizId", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.restoreQuiz.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/quiz/:quizId", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getQuiz.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/live/create-session", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.createSession.bind(instructor_dependencyhandler_1.instructorAuthController));
router.get("/live/token", (0, authRole_1.default)(["instructor"]), instructor_dependencyhandler_1.instructorAuthController.getSessionToken.bind(instructor_dependencyhandler_1.instructorAuthController));
router.post("/logout", instructor_dependencyhandler_1.instructorAuthController.logOut.bind(instructor_dependencyhandler_1.instructorAuthController));
exports.default = router;
